local Q=game:GetService("TextService")local y=game:GetService("RunService")local w={}local j local O local H local N local W={}local o={}local B=0 local m=0 local e=15 local x=Enum.Font.Ubuntu local r=14 local n=Color3.fromRGB(40,44,52)local G=Color3.fromRGB(187,85,255)local D=Color3.fromRGB(97,175,239)local i=Color3.fromRGB(152,195,121)local T=Color3.fromRGB(209,154,102)local k=T local C=Color3.fromRGB(229,192,123)local Z=Color3.fromRGB(224,108,117)local v=Color3.fromRGB(148,148,148)local Y=v local I=Color3.fromRGB(240,240,240)local h={"^(function)[^%w_]","^(local)[^%w_]";"^(if)[^%w_]";"^(for)[^%w_]","^(while)[^%w_]","^(then)[^%w_]";"^(do)[^%w_]","^(else)[^%w_]";"^(elseif)[^%w_]","^(return)[^%w_]","^(end)[^%w_]","^(continue)[^%w_]";"^(and)[^%w_]";"^(not)[^%w_]","^(or)[^%w_]";"[^%w_](or)[^%w_]";"[^%w_](and)[^%w_]","[^%w_](not)[^%w_]";"[^%w_](continue)[^%w_]";"[^%w_](function)[^%w_]","[^%w_](local)[^%w_]","[^%w_](if)[^%w_]";"[^%w_](for)[^%w_]","[^%w_](while)[^%w_]";"[^%w_](then)[^%w_]";"[^%w_](do)[^%w_]","[^%w_](else)[^%w_]";"[^%w_](elseif)[^%w_]","[^%w_](return)[^%w_]","[^%w_](end)[^%w_]"}local s={{"\"","\""};{"\'";"\'"};{"%[%[","%]%]";true}}local S={"%-%-%[%[[^%]%]]+%]?%]?";"(%-%-[^\n]+)"}local A={"[^%w_]([%a_][%a%d_]*)%s*%(";"^([%a_][%a%d_]*)%s*%(";"[:%.%(%[%p]([%a_][%a%d_]*)%s*%("}local X={"[^%w_](%d+[eE]?%d*)","[^%w_](%.%d+[eE]?%d*)";"[^%w_](%d+%.%d+[eE]?%d*)","^(%d+[eE]?%d*)";"^(%.%d+[eE]?%d*)","^(%d+%.%d+[eE]?%d*)"}local t={"[^%w_](true)";"^(true)","[^%w_](false)","^(false)","[^%w_](nil)","^(nil)"}local F={"[^%w_:]([%a_][%a%d_]*):","^([%a_][%a%d_]*):"}local a={"[^_%s%w=>~<%-%+%*]",">";"~";"<","%-","%+";"=","%*"}local R={}function isOffLimits(Q)for y,w in pairs(R)do if Q>=w[1]and Q<=w[2]then return true end end return false end function gfind(Q,y)local w=0 return function()local j,O=Q:find(y,w)if j and O~=#Q then w=O+1 return j,O else return nil end end end function renderComments()local Q=w:getRaw()for y,w in pairs(S)do for Q,y in gfind(Q,w)do if not isOffLimits(Q)then for w=Q,y,1 do table.insert(R,{Q;y})if o[w]then o[w].Color=v end end end end end end function renderStrings()local Q local y local w local j local O local H local N=false for W,B in pairs(o)do if Q then B.Color=i local m=""for Q=j,W,1 do m=m..o[Q].Char end if B.Char:match(y)and not(not w)or m:match("(\\*)"..(y.."$"))and#m:match("(\\*)"..(y.."$"))%2==0 then N=true Q=nil y=nil w=nil O=W R[H][2]=O end end if not N then for O,N in pairs(s)do if B.Char:match(N[1])and not isOffLimits(W)then Q=N[1]y=N[2]w=N[3]B.Color=i j=W H=#R+1 R[H]={j,math.huge}end end end N=false end end function highlightPattern(Q,y)local j=w:getRaw()for Q,w in pairs(Q)do for Q,w in gfind(j,w)do if not isOffLimits(Q)and not isOffLimits(w)then for Q=Q,w,1 do if o[Q]then o[Q].Color=y end end end end end end function autoEscape(Q)Q:gsub("<","&lt;")Q:gsub(">","&gt;")Q:gsub("\"","&quot;")Q:gsub("\'","&apos;")Q:gsub("&","&amp;")return Q end function render()R={}W={}H:ClearAllChildren()N:ClearAllChildren()highlightPattern(A,D)highlightPattern(X,T)highlightPattern(h,G)highlightPattern(F,C)highlightPattern(t,k)highlightPattern(a,I)renderComments()renderStrings()local w local j=""local O=""m=0 B=1 for W=1,#o+1,1 do local n=o[W]if W==#o+1 or n.Char=="\n"then j=j..(w and"</font>"or"")local n=Instance.new("TextLabel")local G=(Q:GetTextSize(O,r,x,Vector2.new(math.huge,math.huge))).X+60 if G>m then m=G end n.TextXAlignment=Enum.TextXAlignment.Left n.TextYAlignment=Enum.TextYAlignment.Top n.Position=UDim2.new(0,0,0,B*e-e/2)n.Size=UDim2.new(0,G,0,r)n.RichText=true n.Font=x n.TextSize=r n.BackgroundTransparency=1 n.Text=j n.Parent=H if W~=#o+1 then local Q=Instance.new("TextLabel")Q.Text=B Q.Font=x Q.TextSize=r Q.Size=UDim2.new(1,0,0,e)Q.TextXAlignment=Enum.TextXAlignment.Right Q.TextColor3=Y Q.Position=UDim2.new(0,0,0,B*e-e/2)Q.BackgroundTransparency=1 Q.Parent=N end j=""O=""w=nil B=B+1 updateZIndex()updateCanvasSize()y.Heartbeat:Wait()elseif n.Char==" "then j=j..n.Char O=O..n.Char elseif n.Char=="\t"then j=j..string.rep(" ",4)O=O..n.Char else if n.Color==w then j=j..autoEscape(n.Char)else j=j..string.format("%s<font color=\"rgb(%d,%d,%d)\">",w and"</font>"or"",n.Color.R*255,n.Color.G*255,n.Color.B*255)j=j..autoEscape(n.Char)w=n.Color end O=O..n.Char end end updateZIndex()updateCanvasSize()end function onFrameSizeChange()local Q=j.AbsoluteSize O.Size=UDim2.new(0,Q.X,0,Q.Y)end function updateCanvasSize()O.CanvasSize=UDim2.new(0,m,0,B*e)end function updateZIndex()for Q,y in pairs(j:GetDescendants())do if y:IsA("GuiObject")then y.ZIndex=j.ZIndex end end end function w.init(y,Q)if typeof(Q)=="Instance"and Q:IsA("Frame")then Q:ClearAllChildren()j=Q O=Instance.new("ScrollingFrame")H=Instance.new("Frame")N=Instance.new("Frame")local y=Q.AbsoluteSize O.Name="HIGHLIGHT_IDE"O.Size=UDim2.new(0,y.X,0,y.Y)O.BackgroundColor3=n O.BorderSizePixel=0 O.ScrollBarThickness=4 H.Name=""H.Size=UDim2.new(1,-40,1,0)H.Position=UDim2.new(0,40,0,0)H.BackgroundTransparency=1 N.Name=""N.Size=UDim2.new(0,25,1,0)N.BackgroundTransparency=1 H.Parent=O N.Parent=O O.Parent=j render();(j:GetPropertyChangedSignal("AbsoluteSize")):Connect(onFrameSizeChange);(j:GetPropertyChangedSignal("ZIndex")):Connect(updateZIndex)else error("Initialization error: argument "..(typeof(Q).." is not a Frame Instance"))end end function w.setRaw(y,Q)Q=Q.."\n"o={}local w=1 for y=1,#Q,1 do table.insert(o,{Char=Q:sub(y,y);Color=Z})end render()end function w.getRaw(Q)local y=""for Q,w in pairs(o)do y=y..w.Char end return y end function w.getString(Q)local y=""for Q,w in pairs(o)do y=y..w.Char:sub(1,1)end return y end function w.getTable(Q)return o end function w.getSize(Q)return#o end function w.getLine(y,Q)local w=0 local j=false local O=""for Q,y in pairs(o)do w=w+1 if y.Char=="\n"and not j then j=true end if j and y.Char~="\n"then O=O..y.Char elseif j then break end end return O end function w.setLine(j,Q,y)if#o and Q>=o[#o].Line then for Q=o[#o].Line,Q,1 do table.insert(o,{Char="\n",Line=Q,Color=Z})local j=w:getRaw()j=j:sub(0,#j)..y w:setRaw(j)return end elseif not(#o)then return end local O=w:getRaw()local H=0 local N=0 for j in gfind(O,"\n")do N=N+1 if Q==N then O=O:sub(0,H)..(y..O:sub(j,#O))w:setRaw(O)return end end error("Unable to set line")end function w.insertLine(j,Q,y)if#o and Q>=o[#o].Line then w:setLine(Q,y)elseif not(#o)then return end local O=w:getRaw()local H=0 local N=0 for j in gfind(O,"\n")do N=N+1 if Q==N then O=O:sub(0,H)..("\n"..(y..("\n"..O:sub(j,#O))))w:setRaw(O)return end end error("Unable to insert line")end local L={}function L.new(...)local Q=w local y={}Q.__index=Q setmetatable(y,Q)y:init(...)return y end return L